/*
Assignment 2 Project "Inventory system"
Student Name: Natalia Iudina (S00009622)
10.12.2020
 */
package inventorysystem;

import static inventorysystem.InventorySystem.currentUser;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


public class OrderProcessing extends javax.swing.JFrame {

    Order orderToProcess;
    OrderDetails[] itemList;
    int itemNumber;

    /**
     * Creates new form OrderProcessing
     */
    public OrderProcessing() {
        initComponents();

        if (currentUser != null) {
            System.out.println("null");

            if (currentUser.equals("Sales assistant")) {
                plOrder.setVisible(false);
            }
        }

        lblNumber.setVisible(false);
        txtNumber.setVisible(false);
        lblQuantity.setVisible(false);
        txtQuantity.setVisible(false);
        btAddToOrder.setVisible(false);
        LoadData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tblItems = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        plOrder = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        btNewOrder = new javax.swing.JButton();
        lblNumber = new javax.swing.JLabel();
        txtNumber = new javax.swing.JTextField();
        lblQuantity = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        btAddToOrder = new javax.swing.JButton();
        btComplete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        taOrderList = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Number", "Description", "Price", "Available stock"
            }
        ));
        tblItems.setName(""); // NOI18N
        jScrollPane2.setViewportView(tblItems);
        tblItems.getAccessibleContext().setAccessibleName("");

        jLabel1.setText("In-stock products:");

        jLabel2.setText("Order");

        btNewOrder.setText("New Order");
        btNewOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNewOrderActionPerformed(evt);
            }
        });

        lblNumber.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblNumber.setText("Product number:");

        txtNumber.setName(""); // NOI18N
        txtNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumberActionPerformed(evt);
            }
        });

        lblQuantity.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblQuantity.setText("Quantity:");

        txtQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQuantityActionPerformed(evt);
            }
        });

        btAddToOrder.setText("Add to order");
        btAddToOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddToOrderActionPerformed(evt);
            }
        });

        btComplete.setText("Complete");
        btComplete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCompleteActionPerformed(evt);
            }
        });

        taOrderList.setColumns(20);
        taOrderList.setRows(5);
        jScrollPane1.setViewportView(taOrderList);

        javax.swing.GroupLayout plOrderLayout = new javax.swing.GroupLayout(plOrder);
        plOrder.setLayout(plOrderLayout);
        plOrderLayout.setHorizontalGroup(
            plOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(plOrderLayout.createSequentialGroup()
                .addComponent(jLabel2)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(plOrderLayout.createSequentialGroup()
                .addGroup(plOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(plOrderLayout.createSequentialGroup()
                        .addComponent(btNewOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(lblQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(plOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btComplete, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btAddToOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        plOrderLayout.setVerticalGroup(
            plOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(plOrderLayout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(plOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btComplete)
                    .addGroup(plOrderLayout.createSequentialGroup()
                        .addGroup(plOrderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btNewOrder)
                            .addComponent(lblNumber)
                            .addComponent(txtNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblQuantity)
                            .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btAddToOrder))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(plOrder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(plOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btNewOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNewOrderActionPerformed
        java.util.Date date = new java.util.Date();
        orderToProcess = new Order();
        orderToProcess.setOrderNumber();
        orderToProcess.setOrderDate(date);
        orderToProcess.setResponsiblePerson(currentUser);
        itemList = new OrderDetails[30];
        itemNumber = 0;
        taOrderList.setText("");

        String orderNumber = orderToProcess.getOrderNumber();

        taOrderList.append("Order #" + orderNumber + "\t" + date.toString() + "\n\n");
        taOrderList.append("*********begin*********\n");
        taOrderList.append("product number:\tquantity\tdescription\n");
        lblNumber.setVisible(true);
        txtNumber.setVisible(true);
        lblQuantity.setVisible(true);
        txtQuantity.setVisible(true);
        btAddToOrder.setVisible(true);
    }//GEN-LAST:event_btNewOrderActionPerformed

    private void txtNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNumberActionPerformed

    private void txtQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtQuantityActionPerformed

    private void btAddToOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddToOrderActionPerformed

        taOrderList.append("\n" + txtNumber.getText() + "\t\t" + txtQuantity.getText() + "\t");
        //Declaring and assigning the object to a reference variable
        Items itemToGet = new Items();
        itemToGet.setProductNumber(txtNumber.getText());
        itemToGet.setQuantity(Integer.parseInt(txtQuantity.getText()));
        itemNumber++;
        UpdateDatabase(itemToGet);
        txtNumber.setText("");
        txtQuantity.setText("");

        LoadData();
 
    }//GEN-LAST:event_btAddToOrderActionPerformed

    private void btCompleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCompleteActionPerformed
        SaveOrderToDatabase(orderToProcess);
        SaveDetailsToDatabase(itemList);
        taOrderList.append("\n**********end**********");
        
        lblNumber.setVisible(false);
        txtNumber.setVisible(false);
        lblQuantity.setVisible(false);
        txtQuantity.setVisible(false);
        btAddToOrder.setVisible(false);
    }//GEN-LAST:event_btCompleteActionPerformed

    public void LoadData() {

        try {
            Connection con = InventorySystem.getConnectionInventorySystem();
            String sql = "Select * from items";

            PreparedStatement pst = con.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            DefaultTableModel tbl = (DefaultTableModel) tblItems.getModel();
            tbl.setRowCount(0);
            //continue reading from resultset when there is a record
            while (rs.next()) {
                //getting data from database field in order according to table column
                Object o[] = {rs.getString("item_ID"),
                    rs.getString("description"),
                    rs.getString("price"),
                    rs.getString("quantity")};
                tbl.addRow(o);  //adding record into table row
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private void UpdateDatabase(Items itemToGet) {

        int currentQuantity = 0;
        double currentSum = 0, totalSumItem = 0;

        //search
        String key = itemToGet.getProductNumber();
        try {
            Connection con = InventorySystem.getConnectionInventorySystem();
            String sql = "Select * from items where item_ID='" + key + "'";
            PreparedStatement pst = con.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            //continue reading from resultset when there is a record
            while (rs.next()) {
                //getting data from database field in order according to table column
                itemToGet.setDescription(rs.getString("description"));
                currentSum = rs.getDouble("price");
                currentQuantity = rs.getInt("quantity");

            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }

        //update
        int resultQuantity = currentQuantity - itemToGet.getQuantity();
        if (resultQuantity < 0) {
            //create a backorder
            OrderDetails objDetail = new OrderDetails();
            objDetail.setOrderDetails_ID(orderToProcess.getOrderNumber() + "_" + itemNumber);
            objDetail.setOrderNumber(orderToProcess.getOrderNumber());
            objDetail.setProductNumber(itemToGet.getProductNumber());
            objDetail.setQuantity(itemToGet.getQuantity());
            objDetail.setStatus("out of stock");
            itemList[itemNumber - 1] = objDetail;
        } else {
            //get items
            try {
                Connection con = InventorySystem.getConnectionInventorySystem();
                String sql = "Update items set quantity=? where item_ID=?";

                PreparedStatement pst = con.prepareStatement(sql);

                pst.setString(1, Integer.toString(resultQuantity));
                pst.setString(2, itemToGet.getProductNumber());
                int result = pst.executeUpdate();
                if (result == 1) {
                    OrderDetails objDetail = new OrderDetails();
                    objDetail.setOrderDetails_ID(orderToProcess.getOrderNumber() + "_" + itemNumber);
                    objDetail.setOrderNumber(orderToProcess.getOrderNumber());
                    objDetail.setProductNumber(itemToGet.getProductNumber());
                    objDetail.setQuantity(itemToGet.getQuantity());
                    objDetail.setStatus("given out");
                    itemList[itemNumber - 1] = objDetail;
                    totalSumItem = currentSum * itemToGet.getQuantity();
                    orderToProcess.setSumOrder(orderToProcess.getSumOrder() + totalSumItem);

                    taOrderList.append(itemToGet.getDescription());
                    //JOptionPane.showMessageDialog(null,"Update Successfully.");             
                }
                con.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.toString());
            }

        }

    }

    private void SaveOrderToDatabase(Order newOrder) {

        try {
            Connection con = InventorySystem.getConnectionInventorySystem();
            PreparedStatement pst = con.prepareStatement("INSERT INTO orders (order_ID, order_sum, order_date, responsible_person) VALUES (?, ?, ?, ?);");

            pst.setString(1, newOrder.getOrderNumber());
            pst.setDouble(2, newOrder.getSumOrder());
            SimpleDateFormat formatter = new SimpleDateFormat("yyyy/MM/dd");
            String strDate = formatter.format(newOrder.getOrderDate());
            pst.setString(3, strDate);
            if (currentUser == null) {
                currentUser = "";
            }
            pst.setString(4, currentUser);
            int result = pst.executeUpdate();
            if (result == 1) {
                //lblStatus.setText("Status: Item " + newItem.getProductNumber() + " is added succesfully");
                //System.out.println("Added succesfully");
                //JOptionPane.showMessageDialog(null, "Registered Succesfully.");
            }
        } catch (HeadlessException | SQLException e) {
            //JOptionPane.showMessageDialog(null,e.toString());
        }
    }

    private void SaveDetailsToDatabase(OrderDetails[] listOrderDetails) {

        try {
            Connection con = InventorySystem.getConnectionInventorySystem();
            for (int index = 0; index < listOrderDetails.length; index++) {
                if (listOrderDetails[index] == null) {
                    break;
                }
                PreparedStatement pst = con.prepareStatement("INSERT INTO order_details (order_details_ID, order_number, product_number, quantity, status) VALUES (?, ?, ?, ?, ?);");

                pst.setString(1, listOrderDetails[index].getOrderDetails_ID());
                pst.setString(2, listOrderDetails[index].getOrderNumber());
                pst.setString(3, listOrderDetails[index].getProductNumber());
                pst.setInt(4, listOrderDetails[index].getQuantity());
                pst.setString(5, listOrderDetails[index].getStatus());
                int result = pst.executeUpdate();
                if (result == 1) {
                    //lblStatus.setText("Status: Item " + newItem.getProductNumber() + " is added succesfully");
                    //System.out.println("Added succesfully");
                    //JOptionPane.showMessageDialog(null, "Registered Succesfully.");
                }
            }

        } catch (HeadlessException | SQLException e) {
            //JOptionPane.showMessageDialog(null,e.toString());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrderProcessing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrderProcessing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrderProcessing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrderProcessing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OrderProcessing().setVisible(true);
            }
        });

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAddToOrder;
    private javax.swing.JButton btComplete;
    private javax.swing.JButton btNewOrder;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblNumber;
    private javax.swing.JLabel lblQuantity;
    private javax.swing.JPanel plOrder;
    private javax.swing.JTextArea taOrderList;
    private javax.swing.JTable tblItems;
    private javax.swing.JTextField txtNumber;
    private javax.swing.JTextField txtQuantity;
    // End of variables declaration//GEN-END:variables
}
